name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  # Backend Testing and Quality
  backend-quality:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx pytest-mock

      - name: Lint with Ruff
        run: |
          python -m ruff check backend/ --output-format=github

      - name: Format check with Black
        run: |
          python -m black --check backend/

      - name: Type check with mypy (if available)
        run: |
          pip install mypy types-requests || true
          python -m mypy backend/ || echo "MyPy check completed with warnings"
        continue-on-error: true

      - name: Run backend unit tests
        run: |
          cd backend
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing and Quality
  frontend-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint frontend code
        run: |
          cd frontend
          npm run lint

      - name: Check frontend formatting
        run: |
          cd frontend
          npm run format:check

      - name: Type check TypeScript
        run: |
          cd frontend
          npm run build

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit
          pip install -r requirements.txt

      - name: Run Bandit security scan
        run: |
          python -m bandit -r backend/ -f json -o bandit-report.json || true
          python -m bandit -r backend/ || true
        continue-on-error: true

      - name: Run Safety security scan
        run: |
          python -m safety check --json --output safety-report.json || true
          python -m safety check || true
        continue-on-error: true

      - name: Run pip-audit
        run: |
          python -m pip_audit --format=json --output=pip-audit-report.json || true
          python -m pip_audit || true
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

  # Integration Testing
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          # Backend dependencies
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx pytest-mock

          # Frontend dependencies
          cd frontend
          npm ci
          cd ..

      - name: Start backend server
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Start frontend server
        run: |
          cd frontend
          npm run build
          npm run preview --port 5173 &
          sleep 10

      - name: Run integration tests
        run: |
          python -m pytest backend/tests/test_integration_api.py -v
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Run contract tests
        run: |
          python contract_testing.py

      - name: Run E2E tests
        run: |
          python e2e_test_runner.py
        continue-on-error: true

  # Database Migration Testing
  migration-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install alembic

      - name: Test database migrations
        run: |
          cd backend
          # Test migrations up
          python -m alembic upgrade head
          # Test migrations down (if rollback migrations exist)
          python -m alembic downgrade -1 || echo "No downgrade available"
          # Test migrations up again
          python -m alembic upgrade head
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust httpx

      - name: Start application
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 15
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Run load tests
        run: |
          python -m pytest backend/tests/test_integration_api.py::TestPerformanceAndLoad -v
        continue-on-error: true

  # Docker Build and Test
  docker-tests:
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t esg-checklist-ai:test .

      - name: Test Docker image
        run: |
          # Start the container
          docker run -d --name test-container -p 8000:8000 esg-checklist-ai:test
          sleep 15

          # Test if the application is running
          curl -f http://localhost:8000/ || curl -f http://localhost:8000/docs

          # Stop the container
          docker stop test-container
          docker rm test-container

  # Deployment Readiness Check
  deployment-check:
    runs-on: ubuntu-latest
    needs:
      [
        backend-quality,
        frontend-quality,
        security-scan,
        integration-tests,
        docker-tests,
      ]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Deployment readiness summary
        run: |
          echo "✅ Backend quality checks passed"
          echo "✅ Frontend quality checks passed" 
          echo "✅ Security scans completed"
          echo "✅ Integration tests passed"
          echo "✅ Docker build succeeded"
          echo ""
          echo "🚀 Application is ready for deployment!"

      - name: Create deployment artifact
        run: |
          echo "Deployment ready at $(date)" > deployment-status.txt
          echo "Commit: ${{ github.sha }}" >> deployment-status.txt
          echo "Branch: ${{ github.ref_name }}" >> deployment-status.txt

      - name: Upload deployment status
        uses: actions/upload-artifact@v4
        with:
          name: deployment-status
          path: deployment-status.txt

  # Notification and Reporting
  notify-completion:
    runs-on: ubuntu-latest
    needs: [deployment-check]
    if: always()

    steps:
      - name: Report CI/CD completion
        run: |
          if [ "${{ needs.deployment-check.result }}" == "success" ]; then
            echo "🎉 CI/CD Pipeline completed successfully!"
            echo "All quality checks passed and application is deployment-ready."
          else
            echo "⚠️ CI/CD Pipeline completed with issues."
            echo "Check the failed jobs for details."
          fi
